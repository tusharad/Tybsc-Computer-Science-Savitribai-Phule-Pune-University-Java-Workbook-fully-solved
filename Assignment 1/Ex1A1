/*
1.Using javap, view the methods of the following classes from the lang package:
java.lang.Object , java.lang.String and java.util.Scanner.
*/


tushar@tushar-Aspire-A315-53:~$ javap java.lang.Object
Compiled from "Object.java"
public class java.lang.Object {
  public java.lang.Object();
  public final native java.lang.Class<?> getClass();
  public native int hashCode();
  public boolean equals(java.lang.Object);
  protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
  public final native void notify();
  public final native void notifyAll();
  public final void wait() throws java.lang.InterruptedException;
  public final native void wait(long) throws java.lang.InterruptedException;
  public final void wait(long, int) throws java.lang.InterruptedException;
  protected void finalize() throws java.lang.Throwable;
  static {};
}
tushar@tushar-Aspire-A315-53:~$ 
tushar@tushar-Aspire-A315-53:~$ javap java.lang.String
Compiled from "String.java"
public final class java.lang.String implements java.io.Serializable, java.lang.Comparable<java.lang.String>, java.lang.CharSequence {
  static final boolean COMPACT_STRINGS;
  public static final java.util.Comparator<java.lang.String> CASE_INSENSITIVE_ORDER;
  static final byte LATIN1;
  static final byte UTF16;
  public java.lang.String();
  public java.lang.String(java.lang.String);
  public java.lang.String(char[]);
  public java.lang.String(char[], int, int);
  public java.lang.String(int[], int, int);
  public java.lang.String(byte[], int, int, int);
  public java.lang.String(byte[], int);
  public java.lang.String(byte[], int, int, java.lang.String) throws java.io.UnsupportedEncodingException;
  public java.lang.String(byte[], int, int, java.nio.charset.Charset);
  public java.lang.String(byte[], java.lang.String) throws java.io.UnsupportedEncodingException;
  public java.lang.String(byte[], java.nio.charset.Charset);
  public java.lang.String(byte[], int, int);
  public java.lang.String(byte[]);
  public java.lang.String(java.lang.StringBuffer);
  public java.lang.String(java.lang.StringBuilder);
  public int length();
  public boolean isEmpty();
  public char charAt(int);
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public int offsetByCodePoints(int, int);
  public void getChars(int, int, char[], int);
  public void getBytes(int, int, byte[], int);
  public byte[] getBytes(java.lang.String) throws java.io.UnsupportedEncodingException;
  public byte[] getBytes(java.nio.charset.Charset);
  public byte[] getBytes();
  public boolean equals(java.lang.Object);
  public boolean contentEquals(java.lang.StringBuffer);
  public boolean contentEquals(java.lang.CharSequence);
  public boolean equalsIgnoreCase(java.lang.String);
  public int compareTo(java.lang.String);
  public int compareToIgnoreCase(java.lang.String);
  public boolean regionMatches(int, java.lang.String, int, int);
  public boolean regionMatches(boolean, int, java.lang.String, int, int);
  public boolean startsWith(java.lang.String, int);
  public boolean startsWith(java.lang.String);
  public boolean endsWith(java.lang.String);
  public int hashCode();
  public int indexOf(int);
  public int indexOf(int, int);
  public int lastIndexOf(int);
  public int lastIndexOf(int, int);
  public int indexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  static int indexOf(byte[], byte, int, java.lang.String, int);
  public int lastIndexOf(java.lang.String);
  public int lastIndexOf(java.lang.String, int);
  static int lastIndexOf(byte[], byte, int, java.lang.String, int);
  public java.lang.String substring(int);
  public java.lang.String substring(int, int);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String concat(java.lang.String);
  public java.lang.String replace(char, char);
  public boolean matches(java.lang.String);
  public boolean contains(java.lang.CharSequence);
  public java.lang.String replaceFirst(java.lang.String, java.lang.String);
  public java.lang.String replaceAll(java.lang.String, java.lang.String);
  public java.lang.String replace(java.lang.CharSequence, java.lang.CharSequence);
  public java.lang.String[] split(java.lang.String, int);
  public java.lang.String[] split(java.lang.String);
  public static java.lang.String join(java.lang.CharSequence, java.lang.CharSequence...);
  public static java.lang.String join(java.lang.CharSequence, java.lang.Iterable<? extends java.lang.CharSequence>);
  public java.lang.String toLowerCase(java.util.Locale);
  public java.lang.String toLowerCase();
  public java.lang.String toUpperCase(java.util.Locale);
  public java.lang.String toUpperCase();
  public java.lang.String trim();
  public java.lang.String strip();
  public java.lang.String stripLeading();
  public java.lang.String stripTrailing();
  public boolean isBlank();
  public java.util.stream.Stream<java.lang.String> lines();
  public java.lang.String toString();
  public java.util.stream.IntStream chars();
  public java.util.stream.IntStream codePoints();
  public char[] toCharArray();
  public static java.lang.String format(java.lang.String, java.lang.Object...);
  public static java.lang.String format(java.util.Locale, java.lang.String, java.lang.Object...);
  public static java.lang.String valueOf(java.lang.Object);
  public static java.lang.String valueOf(char[]);
  public static java.lang.String valueOf(char[], int, int);
  public static java.lang.String copyValueOf(char[], int, int);
  public static java.lang.String copyValueOf(char[]);
  public static java.lang.String valueOf(boolean);
  public static java.lang.String valueOf(char);
  public static java.lang.String valueOf(int);
  public static java.lang.String valueOf(long);
  public static java.lang.String valueOf(float);
  public static java.lang.String valueOf(double);
  public native java.lang.String intern();
  public java.lang.String repeat(int);
  void getBytes(byte[], int, byte);
  java.lang.String(char[], int, int, java.lang.Void);
  java.lang.String(java.lang.AbstractStringBuilder, java.lang.Void);
  java.lang.String(byte[], byte);
  byte coder();
  byte[] value();
  static void checkIndex(int, int);
  static void checkOffset(int, int);
  static void checkBoundsOffCount(int, int, int);
  static void checkBoundsBeginEnd(int, int, int);
  static java.lang.String valueOfCodePoint(int);
  public int compareTo(java.lang.Object);
  static {};
}
tushar@tushar-Aspire-A315-53:~$ javap java.util.Scanner
Compiled from "Scanner.java"
public final class java.util.Scanner implements java.util.Iterator<java.lang.String>, java.io.Closeable {
  int modCount;
  static final boolean $assertionsDisabled;
  public java.util.Scanner(java.lang.Readable);
  public java.util.Scanner(java.io.InputStream);
  public java.util.Scanner(java.io.InputStream, java.lang.String);
  public java.util.Scanner(java.io.InputStream, java.nio.charset.Charset);
  public java.util.Scanner(java.io.File) throws java.io.FileNotFoundException;
  public java.util.Scanner(java.io.File, java.lang.String) throws java.io.FileNotFoundException;
  public java.util.Scanner(java.io.File, java.nio.charset.Charset) throws java.io.IOException;
  public java.util.Scanner(java.nio.file.Path) throws java.io.IOException;
  public java.util.Scanner(java.nio.file.Path, java.lang.String) throws java.io.IOException;
  public java.util.Scanner(java.nio.file.Path, java.nio.charset.Charset) throws java.io.IOException;
  public java.util.Scanner(java.lang.String);
  public java.util.Scanner(java.nio.channels.ReadableByteChannel);
  public java.util.Scanner(java.nio.channels.ReadableByteChannel, java.lang.String);
  public java.util.Scanner(java.nio.channels.ReadableByteChannel, java.nio.charset.Charset);
  public void close();
  public java.io.IOException ioException();
  public java.util.regex.Pattern delimiter();
  public java.util.Scanner useDelimiter(java.util.regex.Pattern);
  public java.util.Scanner useDelimiter(java.lang.String);
  public java.util.Locale locale();
  public java.util.Scanner useLocale(java.util.Locale);
  public int radix();
  public java.util.Scanner useRadix(int);
  public java.util.regex.MatchResult match();
  public java.lang.String toString();
  public boolean hasNext();
  public java.lang.String next();
  public void remove();
  public boolean hasNext(java.lang.String);
  public java.lang.String next(java.lang.String);
  public boolean hasNext(java.util.regex.Pattern);
  public java.lang.String next(java.util.regex.Pattern);
  public boolean hasNextLine();
  public java.lang.String nextLine();
  public java.lang.String findInLine(java.lang.String);
  public java.lang.String findInLine(java.util.regex.Pattern);
  public java.lang.String findWithinHorizon(java.lang.String, int);
  public java.lang.String findWithinHorizon(java.util.regex.Pattern, int);
  public java.util.Scanner skip(java.util.regex.Pattern);
  public java.util.Scanner skip(java.lang.String);
  public boolean hasNextBoolean();
  public boolean nextBoolean();
  public boolean hasNextByte();
  public boolean hasNextByte(int);
  public byte nextByte();
  public byte nextByte(int);
  public boolean hasNextShort();
  public boolean hasNextShort(int);
  public short nextShort();
  public short nextShort(int);
  public boolean hasNextInt();
  public boolean hasNextInt(int);
  public int nextInt();
  public int nextInt(int);
  public boolean hasNextLong();
  public boolean hasNextLong(int);
  public long nextLong();
  public long nextLong(int);
  public boolean hasNextFloat();
  public float nextFloat();
  public boolean hasNextDouble();
  public double nextDouble();
  public boolean hasNextBigInteger();
  public boolean hasNextBigInteger(int);
  public java.math.BigInteger nextBigInteger();
  public java.math.BigInteger nextBigInteger(int);
  public boolean hasNextBigDecimal();
  public java.math.BigDecimal nextBigDecimal();
  public java.util.Scanner reset();
  public java.util.stream.Stream<java.lang.String> tokens();
  public java.util.stream.Stream<java.util.regex.MatchResult> findAll(java.util.regex.Pattern);
  public java.util.stream.Stream<java.util.regex.MatchResult> findAll(java.lang.String);
  public java.lang.Object next();
  static {};
}

